And Subset Count (Bitwise Operations) -

#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    const int MOD = 1'000'000'007;

    int n; 
    if (!(cin >> n)) return 0;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) cin >> a[i];

    int B = 0;
    while ((1 << B) <= n) ++B;
    int M = 1 << B;

    vector<int> freq(M, 0);
    for (int v : a) ++freq[v];

    vector<int> cnt(M, 0);
    for (int k = 0; k < M; ++k) {
        int s = k, c = 0;
        while (s < M) {
            c += freq[s];
            s = (s + 1) | k;
        }
        cnt[k] = c;
    }

    vector<int> pow2(n + 1, 1);
    for (int i = 1; i <= n; ++i) pow2[i] = (pow2[i - 1] * 2LL) % MOD;

    vector<int> F(M, 0);
    for (int mask = 0; mask < M; ++mask) {
        int ways = pow2[cnt[mask]] - 1;
        if (ways < 0) ways += MOD;
        F[mask] = ways;
    }

    for (int b = 0; b < B; ++b) {
        for (int mask = 0; mask < M; ++mask) {
            if ((mask & (1 << b)) == 0) {
                F[mask] -= F[mask | (1 << b)];
                if (F[mask] < 0) F[mask] += MOD;
            }
        }
    }

    for (int k = 0; k <= n; ++k) {
        if (k) cout << ' ';
        cout << F[k];
    }
    cout << '\n';
    return 0;
}


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Counting Bits(Bitwise Operations)-


#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    unsigned long long n;
    if (!(cin >> n)) return 0;

    unsigned long long ans = 0;
    for (int i = 0; i <= 60; ++i) {
        unsigned long long half = 1ULL << i;
        unsigned long long cycle = half << 1;
        unsigned long long full = (n + 1) / cycle;
        unsigned long long rem  = (n + 1) % cycle;
        ans += full * half + (rem > half ? rem - half : 0ULL);
    }
    cout << ans << '\n';
    return 0;
}

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
K Subset Xors(Bitwise Operations)

#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, k;
    if (!(cin >> n >> k)) return 0;
    const int MAXB = 60;
    vector<unsigned long long> basis(MAXB + 1, 0);

    for (int i = 0; i < n; ++i) {
        unsigned long long x;
        cin >> x;
        for (int b = MAXB; b >= 0; --b) {
            if (!(x >> b & 1ULL)) continue;
            if (!basis[b]) { basis[b] = x; break; }
            x ^= basis[b];
        }
    }

    for (int i = 0; i <= MAXB; ++i) if (basis[i])
        for (int j = 0; j <= MAXB; ++j) if (i != j && basis[j] && (basis[j] >> i & 1ULL))
            basis[j] ^= basis[i];

    vector<unsigned long long> vecs;
    for (int b = MAXB; b >= 0; --b) if (basis[b]) vecs.push_back(basis[b]);
    int r = (int)vecs.size();

    unsigned long long repeats;
    if (n - r >= 62) repeats = k;
    else {
        unsigned long long w = 1ULL << (n - r);
        repeats = min<unsigned long long>(w, k);
    }
    int need = (int)((k + repeats - 1) / repeats);
    if (need == 0) need = 1;

    vector<unsigned long long> S = {0};
    for (auto b : vecs) {
        size_t L = min<unsigned long long>((unsigned long long)S.size() * 2ULL, (unsigned long long)need);
        vector<unsigned long long> merged;
        merged.reserve(L);
        size_t i = 0, j = 0;
        while (merged.size() < L) {
            unsigned long long v1 = (i < S.size()) ? S[i] : ULLONG_MAX;
            unsigned long long v2 = (j < S.size()) ? (S[j] ^ b) : ULLONG_MAX;
            if (v1 <= v2) { merged.push_back(v1); ++i; }
            else { merged.push_back(v2); ++j; }
        }
        S.swap(merged);
    }

    long long printed = 0;
    for (size_t i = 0; i < S.size() && printed < k; ++i) {
        unsigned long long cnt = min<unsigned long long>(repeats, k - printed);
        while (cnt--) {
            cout << S[i];
            ++printed;
            if (printed < k) cout << ' ';
        }
    }
    cout << '\n';
    return 0;
}

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Number of Subset Xors(Bitwise Operations)


#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n; 
    if (!(cin >> n)) return 0;
    const int MAXB = 60;
    vector<unsigned long long> basis(MAXB + 1, 0);

    for (int i = 0; i < n; ++i) {
        unsigned long long x; 
        cin >> x;
        for (int b = MAXB; b >= 0; --b) {
            if (!((x >> b) & 1ULL)) continue;
            if (!basis[b]) { basis[b] = x; break; }
            x ^= basis[b];
        }
    }

    int rank = 0;
    for (auto v : basis) if (v) ++rank;

    unsigned long long ans = 1ULL << rank;
    cout << ans << '\n';
    return 0;
}

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Sliding Window Mex(Sliding Window Problems)

#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int n, k;
    if (!(cin >> n >> k)) return 0;
    vector<int> a(n);
    for (int i = 0; i < n; ++i) cin >> a[i];

    vector<int> cnt(k + 1, 0);
    set<int> missing;
    for (int v = 0; v <= k; ++v) missing.insert(v);

    for (int i = 0; i < k; ++i) {
        if (a[i] <= k) {
            if (cnt[a[i]] == 0) missing.erase(a[i]);
            ++cnt[a[i]];
        }
    }

    auto print_val = [&](int val, bool last) {
        cout << val;
        if (!last) cout << ' ';
    };

    int windows = n - k + 1;
    print_val(*missing.begin(), windows == 1);

    for (int i = k, w = 2; i < n; ++i, ++w) {
        int out = a[i - k];
        if (out <= k) {
            if (--cnt[out] == 0) missing.insert(out);
        }
        int in = a[i];
        if (in <= k) {
            if (cnt[in] == 0) missing.erase(in);
            ++cnt[in];
        }
        print_val(*missing.begin(), w == windows);
    }
    cout << '\n';
    return 0;
}


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
